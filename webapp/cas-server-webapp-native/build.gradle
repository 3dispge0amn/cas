description = "Apereo CAS Native GraalVM Web Application"

ext {
    publishMetadata = true
    projectMetadata = [
        facets: ["web"],
        category: "Web Application",
        title: "GraalVM Native Image Web Application",
        aliases: ["graalvmwebapp"]
    ]
}

configurations.configureEach {
    /*
        Log4j does not support GraalVM and leads to com.oracle.svm.core.jdk.UnsupportedFeatureError:
        Defining hidden classes at runtime is not supported.
        We use logback instead.
     */
    exclude(group: "org.apache.logging.log4j", module: "log4j-api")
    exclude(group: "org.apache.logging.log4j", module: "log4j-jakarta-web")
    exclude(group: "org.apache.logging.log4j", module: "log4j-web")
    exclude(group: "org.apache.logging.log4j", module: "log4j-jcl")
    exclude(group: "org.apache.logging.log4j", module: "log4j-slf4j-impl")
    exclude(group: "org.apache.logging.log4j", module: "log4j-slf4j2-impl")
    exclude(group: "org.apereo.cas", module: "cas-server-core-logging")

    /*
        DevTools and Spring Cloud Bootstrap do not support native images.
     */
    exclude(group: "org.springframework.boot", module: "spring-boot-devtools")
    exclude(group: "org.springframework.cloud", module: "spring-cloud-starter-bootstrap")
}

dependencies {
    compileOnly libraries.graalvmsdk
    
    implementation project(":webapp:cas-server-webapp-init")
    implementation project(":webapp:cas-server-webapp-resources")
    implementation project(":webapp:cas-server-webapp-init-tomcat")

    implementation project(":core:cas-server-core")
    implementation project(":core:cas-server-core-audit")
    implementation project(":core:cas-server-core-authentication")
    implementation project(":core:cas-server-core-authentication-api")
    implementation project(":core:cas-server-core-cookie")
    implementation project(":core:cas-server-core-configuration")
    implementation project(":core:cas-server-core-logout")
    implementation project(":core:cas-server-core-services")
    implementation project(":core:cas-server-core-services-api")
    implementation project(":core:cas-server-core-tickets")
    implementation project(":core:cas-server-core-tickets-api")
    implementation project(":core:cas-server-core-util")
    implementation project(":core:cas-server-core-util-api")
    implementation project(":core:cas-server-core-validation")
    implementation project(":core:cas-server-core-web")
    implementation project(":core:cas-server-core-webflow-api")
    implementation project(":core:cas-server-core-notifications")

    implementation project(":support:cas-server-support-native")
    implementation project(":support:cas-server-support-webconfig")
    implementation project(":support:cas-server-support-logback")
    implementation project(":support:cas-server-support-person-directory")
    implementation project(":support:cas-server-support-themes")
    implementation project(":support:cas-server-support-validation")
    implementation project(":support:cas-server-support-thymeleaf")
    implementation project(":support:cas-server-support-actions")
    implementation project(":support:cas-server-support-actions-core")
    implementation project(":support:cas-server-support-pm-webflow")

    def casModules = providers.systemProperty("casModules").getOrNull()
    if (casModules != null) {
        def dependencies = casModules.split(",")
        dependencies.each {
            def projectsToAdd = rootProject.subprojects.findAll {project ->
                def pattern = /cas-server-${it}|cas-server-core-${it}|cas-server-support-${it}/
                logger.debug("Matching ${pattern} against CAS module ${project.name}")
                project.name.matches(pattern)
            }

            ansi.green("Including CAS module(s): ${projectsToAdd} in native web application")
            projectsToAdd.each {
                implementation it
            }
        }
    }
    
    testImplementation libraries.graalvmsdk
}
